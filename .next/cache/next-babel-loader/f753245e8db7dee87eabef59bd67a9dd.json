{"ast":null,"code":"\"use strict\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { i18n, Link, withTranslation } from '../../i18n';\nconst Header = ({\n  t\n}) => {\n  const {\n    0: showMobileMenu,\n    1: setShowMobileMenu\n  } = useState(false);\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(\"light\");\n  useEffect(() => {\n    if (false) {\n      if (\"theme\" in window.localStorage) {\n        window.document.querySelector(\"html\").classList.add(window.localStorage.theme);\n        setTheme(window.localStorage.theme);\n      } else {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n          window.document.querySelector(\"html\").classList.add(\"dark\");\n          setTheme(\"dark\");\n        }\n      }\n    }\n  }, []);\n  const updateTheme = theme => {\n    setTheme(theme);\n    window.document.querySelector(\"html\").classList.remove(\"light\");\n    window.document.querySelector(\"html\").classList.remove(\"dark\");\n    window.document.querySelector(\"html\").classList.add(theme);\n    window.localStorage.setItem(\"theme\", theme);\n  };\n  const langs = [{\n    title: 'English',\n    value: 'en'\n  }, {\n    title: 'Français',\n    value: 'fr'\n  }, {\n    title: 'Português Brasileiro',\n    value: 'pt'\n  }];\n  return __jsx(\"div\", {\n    id: \"header\"\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    id: \"logo\"\n  }, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    className: \"logo\",\n    title: t('headline')\n  }, \"DDLVid\"))), __jsx(\"div\", {\n    id: \"nav\",\n    className: showMobileMenu ? 'show-menu' : null\n  }, __jsx(\"div\", {\n    id: \"lang\"\n  }, __jsx(\"select\", {\n    value: i18n.language,\n    onChange: e => {\n      i18n.changeLanguage(e.target.value);\n      setShowMobileMenu(false);\n    },\n    \"aria-label\": t('site_language')\n  }, langs.map(lang => {\n    return __jsx(\"option\", {\n      value: lang.value,\n      key: lang.value\n    }, lang.title);\n  }))), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    onClick: () => setShowMobileMenu(false),\n    title: t('home') + ' - DDLVid'\n  }, t('home')))), __jsx(\"li\", null, __jsx(Link, {\n    href: \"/supported-websites\"\n  }, __jsx(\"a\", {\n    onClick: () => setShowMobileMenu(false),\n    title: t('supported_websites') + ' - DDLVid'\n  }, t('supported_websites')))), __jsx(\"li\", null, __jsx(Link, {\n    href: \"/contact\"\n  }, __jsx(\"a\", {\n    onClick: () => setShowMobileMenu(false),\n    title: t('contact_us') + ' - DDLVid'\n  }, t('contact_us')))), __jsx(\"li\", null, __jsx(\"a\", {\n    href: \"https://telegram.me/ddlvid_bot\",\n    title: \"DDLVid Telegram Bot\",\n    target: \"_blank\"\n  }, \"Telegram\")))), theme === \"light\" ? __jsx(\"a\", {\n    onClick: () => updateTheme(\"dark\"),\n    className: \"theme dark\"\n  }, __jsx(\"i\", null), \" \", __jsx(\"span\", null, t('dark_mode'))) : __jsx(\"a\", {\n    onClick: () => updateTheme(\"light\"),\n    className: \"theme light\"\n  }, __jsx(\"i\", null), \" \", __jsx(\"span\", null, t('light_mode'))), __jsx(\"a\", {\n    href: \"https://telegram.me/ddlvid_bot\",\n    id: \"telegramBot\",\n    target: \"_blank\"\n  }, \"DDLVid Telegram Bot\"), __jsx(\"span\", {\n    className: \"mobileMenuButton\",\n    onClick: () => setShowMobileMenu(!showMobileMenu)\n  }), showMobileMenu ? __jsx(\"div\", {\n    className: \"mobileMenuOverlay\",\n    onClick: () => setShowMobileMenu(false)\n  }) : null, __jsx(\"div\", {\n    className: \"clear\"\n  })));\n};\nexport default withTranslation('header')(Header);","map":null,"metadata":{},"sourceType":"module"}